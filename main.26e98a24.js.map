{"version":3,"sources":["scripts/main.js"],"names":["body","document","message","first","resolved","rejected","second","third","printNotification","text","classStatus","maskMessage","insertAdjacentHTML","firstPromise","Promise","resolve","reject","addEventListener","setTimeout","then","secondPromise","e","target","tagName","left","right","thirdPromise","button"],"mappings":";AAAA,aAsEA,SAAA,EAAA,GAAA,OAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,IAAA,SAAA,IAAA,MAAA,IAAA,UAAA,wIAAA,SAAA,EAAA,EAAA,GAAA,GAAA,EAAA,CAAA,GAAA,iBAAA,EAAA,OAAA,EAAA,EAAA,GAAA,IAAA,EAAA,OAAA,UAAA,SAAA,KAAA,GAAA,MAAA,GAAA,GAAA,MAAA,WAAA,GAAA,EAAA,cAAA,EAAA,EAAA,YAAA,MAAA,QAAA,GAAA,QAAA,EAAA,MAAA,KAAA,GAAA,cAAA,GAAA,2CAAA,KAAA,GAAA,EAAA,EAAA,QAAA,GAAA,SAAA,EAAA,GAAA,GAAA,oBAAA,QAAA,OAAA,YAAA,OAAA,GAAA,OAAA,MAAA,KAAA,GAAA,SAAA,EAAA,GAAA,GAAA,MAAA,QAAA,GAAA,OAAA,EAAA,GAAA,SAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,UAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,OAAA,EApEA,IAAMA,EAAOC,SAASD,KAChBE,EAAU,CACdC,MAAO,CACLC,SAAU,6BACVC,SAAU,8BAEZC,OAAQ,8BACRC,MAAO,8BAGHC,EAAoB,SAACC,EAAMC,GACzBC,IAAAA,EAGOD,4DAAAA,OAAAA,EAGPD,mDAAAA,OAAAA,EANN,oBAUAT,EAAKY,mBAAmB,YAAaD,IAGjCE,EAAe,IAAIC,QAAQ,SAACC,EAASC,GACzCf,SAASgB,iBAAiB,QAAS,WACjCF,EAAQ,CAACb,EAAQC,MAAMC,SAAU,cAGnCc,WAAW,WAAMF,OAAAA,EAAOd,EAAQC,MAAME,WAAW,OAGnDQ,EACGM,KACC,SAAAJ,GAAWP,OAAAA,EAAA,WAAqBO,EAAAA,EAAAA,KAChC,SAAAC,GAAUR,OAAAA,EAAkBQ,EAAQ,aAGxC,IAAMI,EAAgB,IAAIN,QAAQ,SAAAC,GAChCd,SAASgB,iBAAiB,YAAa,SAACI,GACb,OAArBA,EAAEC,OAAOC,SACXR,EAAQb,EAAQI,YAKtBc,EAAcD,KAAK,SAAAJ,GAAWP,OAAAA,EAAkBO,EAAS,aAEzD,IAAIS,GAAO,EACPC,GAAQ,EAENC,EAAe,IAAIZ,QAAQ,SAAAC,GAC/Bd,SAASgB,iBAAiB,YAAa,SAACI,GAC9BA,OAAAA,EAAEM,QACH,KAAA,EACHH,GAAO,EACP,MAEG,KAAA,EACHC,GAAQ,EAGRD,GAAQC,GACVV,EAAQb,EAAQK,WAKtBmB,EAAaP,KAAK,SAAAJ,GAAWP,OAAAA,EAAkBO,EAAS","file":"main.26e98a24.js","sourceRoot":"../src","sourcesContent":["'use strict';\n\nconst body = document.body;\nconst message = {\n  first: {\n    resolved: 'First promise was resolved',\n    rejected: 'First promise was rejected',\n  },\n  second: 'Second promise was resolved',\n  third: 'Third promise was resolved',\n};\n\nconst printNotification = (text, classStatus) => {\n  const maskMessage = `\n    <div \n      style=\"padding: 20px;\" \n      class=\"${classStatus}\" \n      data-qa=\"notification\"\n    >\n      ${text}\n    </div>\n  `;\n\n  body.insertAdjacentHTML('beforeend', maskMessage);\n};\n\nconst firstPromise = new Promise((resolve, reject) => {\n  document.addEventListener('click', () => {\n    resolve([message.first.resolved, 'success']);\n  });\n\n  setTimeout(() => reject(message.first.rejected), 3000);\n});\n\nfirstPromise\n  .then(\n    resolve => printNotification(...resolve),\n    reject => printNotification(reject, 'warning')\n  );\n\nconst secondPromise = new Promise(resolve => {\n  document.addEventListener('mousedown', (e) => {\n    if (e.target.tagName !== 'H1') {\n      resolve(message.second);\n    }\n  });\n});\n\nsecondPromise.then(resolve => printNotification(resolve, 'success'));\n\nlet left = false;\nlet right = false;\n\nconst thirdPromise = new Promise(resolve => {\n  document.addEventListener('mousedown', (e) => {\n    switch (e.button) {\n      case 0:\n        left = true;\n        break;\n\n      case 2:\n        right = true;\n    }\n\n    if (left && right) {\n      resolve(message.third);\n    }\n  });\n});\n\nthirdPromise.then(resolve => printNotification(resolve, 'success'));\n"]}